// Prisma 스키마 (PRD 요구사항 반영)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 과목 모델
model Course {
  id          Int     @id @default(autoincrement())
  memberIdx   Int     @map("member_idx")
  name        String  @db.VarChar(255)
  code        String  @db.VarChar(50)
  instructor  String? @db.VarChar(100)
  credits     Int     @default(3) @db.TinyInt
  description String? @db.Text
  regDate     Int     @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate     Int     @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate     Int?    @map("del_date")
  isFlag      Int     @default(0) @map("is_flag") @db.TinyInt

  // Relations
  assignments Assignment[]
  schedules   Schedule[]

  @@index([memberIdx], map: "idx_member_idx")
  @@index([isFlag], map: "idx_is_flag")
  @@map("courses")
}

// 팀 모델
model Team {
  id                String @id @db.VarChar(50)
  creatorMemberIdx  Int    @map("creator_member_idx")
  name              String @db.VarChar(255)
  description       String? @db.Text
  regDate           Int    @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate           Int    @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate           Int?   @map("del_date")
  isFlag            Int    @default(0) @map("is_flag") @db.TinyInt

  // Relations
  members     TeamMember[]
  assignments Assignment[]
  tasks       TeamTask[]
  chatMessages TeamChatMessage[]

  @@index([creatorMemberIdx], map: "idx_creator_member_idx")
  @@index([isFlag], map: "idx_is_flag")
  @@map("teams")
}

// 팀 멤버 모델
model TeamMember {
  id           Int                    @id @default(autoincrement())
  teamId       String                 @map("team_id") @db.VarChar(50)
  memberIdx    Int                    @map("member_idx")
  memberName   String                 @map("member_name") @db.VarChar(100)
  memberAvatar String?                @map("member_avatar") @db.VarChar(255)
  status       TeamMemberStatus       @default(pending)
  role         TeamMemberRole         @default(member)
  regDate      Int                    @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate      Int                    @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate      Int?                   @map("del_date")
  isFlag       Int                    @default(0) @map("is_flag") @db.TinyInt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, memberIdx], map: "unique_team_member")
  @@index([teamId], map: "idx_team_id")
  @@index([memberIdx], map: "idx_member_idx")
  @@index([status], map: "idx_status")
  @@index([isFlag], map: "idx_is_flag")
  @@map("team_members")
}

// 과제 모델
model Assignment {
  id               Int              @id @default(autoincrement())
  memberIdx        Int              @map("member_idx")
  title            String           @db.VarChar(255)
  courseId         Int?             @map("course_id")
  courseName       String           @map("course_name") @db.VarChar(255)
  dueDate          DateTime         @map("due_date") @db.Date
  status           AssignmentStatus @default(pending)
  priority         Priority         @default(medium)
  description      String?          @db.Text
  submitLink       String?          @map("submit_link") @db.VarChar(500)
  notes            String?          @db.Text
  isTeamAssignment Int              @default(0) @map("is_team_assignment") @db.TinyInt
  teamId           String?          @map("team_id") @db.VarChar(50)
  regDate          Int              @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate          Int              @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate          Int?             @map("del_date")
  isFlag           Int              @default(0) @map("is_flag") @db.TinyInt

  // Relations
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  tasks  TeamTask[]

  @@index([memberIdx], map: "idx_member_idx")
  @@index([courseId], map: "idx_course_id")
  @@index([teamId], map: "idx_team_id")
  @@index([dueDate], map: "idx_due_date")
  @@index([status], map: "idx_status")
  @@index([isFlag], map: "idx_is_flag")
  @@map("assignments")
}

// 스케줄 모델
model Schedule {
  id          Int       @id @default(autoincrement())
  memberIdx   Int       @map("member_idx")
  courseId    Int?      @map("course_id")
  subject     String    @db.VarChar(255)
  dayOfWeek   DayOfWeek @map("day_of_week")
  startTime   DateTime  @map("start_time") @db.Time
  endTime     DateTime  @map("end_time") @db.Time
  room        String?   @db.VarChar(100)
  instructor  String?   @db.VarChar(100)
  regDate     Int       @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate     Int       @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate     Int?      @map("del_date")
  isFlag      Int       @default(0) @map("is_flag") @db.TinyInt

  // Relations
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@index([memberIdx], map: "idx_member_idx")
  @@index([courseId], map: "idx_course_id")
  @@index([dayOfWeek], map: "idx_day_of_week")
  @@index([isFlag], map: "idx_is_flag")
  @@map("schedules")
}

// 팀 태스크 모델
model TeamTask {
  id           String      @id @db.VarChar(50)
  teamId       String      @map("team_id") @db.VarChar(50)
  assignmentId Int?        @map("assignment_id")
  text         String      @db.Text
  completed    Int         @default(0) @db.TinyInt
  assignedTo   Int?        @map("assigned_to")
  regDate      Int         @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate      Int         @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate      Int?        @map("del_date")
  isFlag       Int         @default(0) @map("is_flag") @db.TinyInt

  // Relations
  team       Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: SetNull)

  @@index([teamId], map: "idx_team_id")
  @@index([assignmentId], map: "idx_assignment_id")
  @@index([assignedTo], map: "idx_assigned_to")
  @@index([isFlag], map: "idx_is_flag")
  @@map("team_tasks")
}

// 팀 채팅 메시지 모델
model TeamChatMessage {
  id         String @id @db.VarChar(50)
  teamId     String @map("team_id") @db.VarChar(50)
  memberIdx  Int    @map("member_idx")
  memberName String @map("member_name") @db.VarChar(100)
  message    String @db.Text
  regDate    Int    @default(dbgenerated("UNIX_TIMESTAMP()")) @map("reg_date")
  mdyDate    Int    @default(dbgenerated("UNIX_TIMESTAMP()")) @updatedAt @map("mdy_date")
  delDate    Int?   @map("del_date")
  isFlag     Int    @default(0) @map("is_flag") @db.TinyInt

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId], map: "idx_team_id")
  @@index([memberIdx], map: "idx_member_idx")
  @@index([regDate], map: "idx_reg_date")
  @@index([isFlag], map: "idx_is_flag")
  @@map("team_chat_messages")
}

// Enums
enum TeamMemberStatus {
  pending
  accepted
  rejected
}

enum TeamMemberRole {
  admin
  member
}

enum AssignmentStatus {
  pending
  completed
}

enum Priority {
  low
  medium
  high
}

enum DayOfWeek {
  월
  화
  수
  목
  금
  토
  일
}
